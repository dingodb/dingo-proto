syntax = "proto3";

import "proxy_common.proto";
import "proxy_error.proto";

package dingodb.pb.proxy.index;

option java_package = "io.dingodb.proxy.index";
option java_generic_services = true;

message VectorAddRequest {
  string schema_name = 1;
  string index_name = 2;
  repeated dingodb.pb.proxy.common.VectorWithId vectors = 3;
  bool replace_deleted = 4;
  bool is_update = 5;
}

message VectorAddResponse {
  dingodb.pb.proxy.error.Error error = 1;
  repeated dingodb.pb.proxy.common.VectorWithId vectors = 2;
}

message VectorGetRequest {
  string schema_name = 1;
  string index_name = 2;
  repeated uint64 vector_ids = 3;
  bool without_vector_data = 4;
  bool without_scalar_data = 5;
  repeated string selected_keys = 6;

  bool without_table_data = 7;
}

message VectorGetResponse {
  dingodb.pb.proxy.error.Error error = 1;
  repeated dingodb.pb.proxy.common.VectorWithId vectors = 2;
}

message VectorSearchRequest {
  string schema_name = 1;
  string index_name = 2;
  repeated dingodb.pb.proxy.common.VectorWithId vectors = 3;
  dingodb.pb.proxy.common.VectorSearchParameter parameter = 4;
}

message VectorWithDistanceResult {
  repeated dingodb.pb.proxy.common.VectorWithDistance vector_with_distances = 1;
}

message VectorSearchResponse {
  dingodb.pb.proxy.error.Error error = 1;
  repeated VectorWithDistanceResult batch_results = 2;
}

message VectorDeleteRequest {
  string schema_name = 1;
  string index_name = 2;
  repeated uint64 ids = 3;
}

message VectorDeleteResponse {
  dingodb.pb.proxy.error.Error error = 1;
  repeated bool key_states = 2;
}

message VectorGetBorderIdRequest {
  string schema_name = 1;
  string index_name = 2;
  bool get_min = 3;  // if true, get min id, else get max id
}

message VectorGetBorderIdResponse {
  dingodb.pb.proxy.error.Error error = 1;
  uint64 id = 2;
}

message VectorScanQueryRequest {
  string schema_name = 1;
  string index_name = 2;
  uint64 vector_id_start = 3;
  bool is_reverse_scan = 4;
  uint64 max_scan_count = 5;  // the max count user want to scan
  uint64 vector_id_end = 6;   // the end id of scan, if is_reverse_scan is true, vector_id_end must be less than
                              // vector_id_start, if is_reverse_scan is false, vector_id_end must be greater than
                              // vector_id_start
                              // the real range is [start, end], include start and end
                              // if vector_id_end == 0, scan to the end of the region

  bool without_vector_data = 11;
  bool without_scalar_data = 12;
  repeated string selected_keys = 13;
  bool without_table_data = 14;

  // Whether to use scalar filtering.
  bool use_scalar_filter = 20;
  dingodb.pb.proxy.common.VectorScalarData scalar_for_filter = 21;
}

message VectorScanQueryResponse {
  dingodb.pb.proxy.error.Error error = 1;
  repeated dingodb.pb.proxy.common.VectorWithId vectors = 2;
}

message VectorGetRegionMetricsRequest {
  string schema_name = 1;
  string index_name = 2;
}

message VectorGetRegionMetricsResponse {
  dingodb.pb.proxy.error.Error error = 1;
  dingodb.pb.proxy.common.VectorIndexMetrics metrics = 2;
}

service IndexService {
  rpc VectorAdd(VectorAddRequest) returns (VectorAddResponse);
  rpc VectorGet(VectorGetRequest) returns (VectorGetResponse);
  rpc VectorSearch(VectorSearchRequest) returns (VectorSearchResponse);
  rpc VectorDelete(VectorDeleteRequest) returns (VectorDeleteResponse);
  rpc VectorGetBorderId(VectorGetBorderIdRequest) returns (VectorGetBorderIdResponse);
  rpc VectorScanQuery(VectorScanQueryRequest) returns (VectorScanQueryResponse);
  rpc VectorGetRegionMetrics(VectorGetRegionMetricsRequest) returns (VectorGetRegionMetricsResponse);

}